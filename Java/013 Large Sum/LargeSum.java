/*
 * Work out the first ten digits of the sum of one-hundred 50-digit numbers.
 */

public class LargeSum {

    public static void main(String[] args) {
        double[] numbers = {
            3710728753.3902102798797998220837590246510135740250d,
            4637693767.7490009712648124896970078050417018260538d,
            7432498619.9524741059474233309513058123726617309629d,
            9194221336.3574161572522430563301811072406154908250d,
            2306758820.7539346171171980310421047513778063246676d,
            8926167069.6623633820136378418383684178734361726757d,
            2811287981.2849979408065481931592621691275889832738d,
            4427422891.7432520321923589422876796487670272189318d,
            4745144573.6001306439091167216856844588711603153276d,
            7038648610.5843025439939619828917593665686757934951d,
            6217645714.1856560629502157223196586755079324193331d,
            6490635246.2741904929101432445813822663347944758178d,
            9257586771.8337217661963751590579239728245598838407d,
            5820356532.5359399008402633568948830189458628227828d,
            8018119938.4826282014278194139940567587151170094390d,
            3539866437.2827112653829987240784473053190104293586d,
            8651550600.6295864861532075273371959191420517255829d,
            7169388870.7715466499115593487603532921714970056938d,
            5437007057.6826684624621495650076471787294438377604d,
            5328265410.8756828443191190634694037855217779295145d,
            3612327252.5000296071075082563815656710885258350721d,
            4587657617.2410976447339110607218265236877223636045d,
            1742370690.5851860660448207621209813287860733969412d,
            8114266041.8086830619328460811191061556940512689692d,
            5193432545.1728388641918047049293215058642563049483d,
            6246722164.8435076201727918039944693004732956340691d,
            1573244438.6908125794514089057706229429197107928209d,
            5503768752.5678773091862540744969844508330393682126d,
            1833638482.5330154686196124348767681297534375946515d,
            8038628759.2878490201521685554828717201219257766954d,
            7818283375.7993103614740356856449095527097864797581d,
            1672632010.0436897842553539920931837441497806860984d,
            4840309812.9077791799088218795327364475675590848030d,
            8708698755.1392711854517078544161852424320693150332d,
            5995940689.5756536782107074926966537676326235447210d,
            6979395067.9652694742597709739166693763042633987085d,
            4105268470.8299085211399427365734116182760315001271d,
            6537860736.1501080857009149939512557028198746004375d,
            3582903531.7434717326932123578154982629742552737307d,
            9495375976.5105305946966067683156574377167401875275d,
            8890280257.1733229619176668713819931811048770190271d,
            2526768027.6078003013678680992525463401061632866526d,
            3627021854.0497705585629946580636237993140746255962d,
            2407448690.8231174977792365466257246923322810917141d,
            9143028819.7103288597806669760892938638285025333403d,
            3441306557.8016127815921815005561868836468420090470d,
            2305308117.2816430487623791969842487255036638784583d,
            1148769693.2154902810424020138335124462181441773470d,
            6378329949.0636259666498587618221225225512486764533d,
            6772018697.1698544312419572409913959008952310058822d,
            9554825530.0263520781532296796249481641953868218774d,
            7608532713.2285723110424803456124867697064507995236d,
            3777424253.5411291684276865538926205024910326572967d,
            2370191327.5725675285653248258265463092207058596522d,
            2979886027.2258331913126375147341994889534765745501d,
            1849570145.4879288984856827726077713721403798879715d,
            3829820378.3031473527721580348144513491373226651381d,
            3482954382.9199918180278916522431027392251122869539d,
            4095795306.6405232632538044100059654939159879593635d,
            2974615218.5502371307642255121183693803580388584903d,
            4169811622.2072977186158236678424689157993532961922d,
            6246795719.4401269043877107275048102390895523597457d,
            2318970677.2547915061505504953922979530901129967519d,
            8618808822.5875314529584099251203829009407770775672d,
            1130673970.8304724483816533873502340845647058077308d,
            8295917476.7140363198008187129011875491310547126581d,
            9762333104.4818386269515456334926366572897563400500d,
            4284628018.3517070527831839425882145521227251250327d,
            5512160354.6981200581762165212827652751691296897789d,
            3223819573.4329339946437501907836945765883352399886d,
            7550616496.5184775180738168837861091527357929701337d,
            6217784275.2192623401942399639168044983993173312731d,
            3292418570.7147349566916674687634660915035914677504d,
            9951867143.0235219628894890102423325116913619626622d,
            7326746080.0591547471830798392868535206946944540724d,
            7684182252.4674417161514036427982273348055556214818d,
            9714261791.0342598647204516893989422179826088076852d,
            8778364618.2799346313767754307809363333018982642090d,
            1084880252.1674670883215120185883543223812876952786d,
            7132961247.4782464538636993009049310363619763878039d,
            6218407357.2399794223406235393808339651327408011116d,
            6662789198.1488087797941876876144230030984490851411d,
            6066182629.3682836764744779239180335110989069790714d,
            8578694408.9552990653640447425576083659976645795096d,
            6602439640.9905389607120198219976047599490197230297d,
            6491398268.0032973156037120041377903785566085089252d,
            1673093931.9872750275468906903707539413042652315011d,
            9480937724.5048795150954100921645863754710598436791d,
            7863916702.1187492431995700641917969777599028300699d,
            1536871371.1936614952811305876380278410754449733078d,
            4078992311.5535562561142322423255033685442488917353d,
            4488991150.1440648020369068063960672322193204149535d,
            4150312888.0339536053299340368006977710650566631954d,
            8123488067.3210146739058568557934581403627822703280d,
            8261657077.3948327592232845941706525094512325230608d,
            2291880205.8777319719839450180888072429661980811197d,
            7715854250.2016545090413245809786882778948721859617d,
            7210783843.5069186155435662884062257473692284509516d,
            2084960398.0134001723930671666823555245252804609722d,
            5350353422.6472524250874054075591789781264330331690d
        };
        double sum = 0;
        for (double d : numbers) {
            sum += d;
        }
        String sumString = String.format("%.0f", sum);
        String answer = sumString.substring(0, 10);
        System.out.println(answer);
    }

}
